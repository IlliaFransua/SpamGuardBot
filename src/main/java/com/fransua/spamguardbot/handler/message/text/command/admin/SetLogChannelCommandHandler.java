package com.fransua.spamguardbot.handler.message.text.command.admin;


import com.fransua.spamguardbot.config.BotCommands;
import com.fransua.spamguardbot.config.BotConfig;
import com.fransua.spamguardbot.handler.HandlerProcessingStatus;
import com.fransua.spamguardbot.handler.message.text.BaseTextHandler;
import com.fransua.spamguardbot.service.BotConfigService;
import com.fransua.spamguardbot.util.ParsedUpdate;
import com.fransua.spamguardbot.util.UpdateContext;
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.chatmember.*;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.generics.TelegramClient;


// TODO: refactor
public class SetLogChannelCommandHandler extends BaseTextHandler {

  @Override
  public boolean canHandle(Update update) {
    switch (handlerProcessingStatus.get()) {
      case HandlerProcessingStatus.CAN_BE_HANDLED -> {
        return true;
      }
      case HandlerProcessingStatus.CAN_NOT_BE_HANDLED -> {
        return false;
      }
    }
    if (!super.canHandle(update)) {
      return false;
    }
    ParsedUpdate parsedUpdate = UpdateContext.getParsedUpdate();
    String text = parsedUpdate.getAnyTextFromMessage();
    if (text.equalsIgnoreCase(BotCommands.Admin.SET_LOG_CHANNEL_COMMAND) &&
        parsedUpdate.isAdminMessage()) {
      handlerProcessingStatus.set(HandlerProcessingStatus.CAN_BE_HANDLED);
      return true;
    }
    handlerProcessingStatus.set(HandlerProcessingStatus.CAN_NOT_BE_HANDLED);
    return false;
  }

  @Override
  public int getPriority() {
    return 10;
  }

  @Override
  public void handle(TelegramClient telegramClient, Update update) throws Exception {
    if (!canHandle(update)) {
      throw new IllegalArgumentException("Can not handle the provided update.");
    }
    Message msg = UpdateContext.getParsedUpdate().getMessage();
    String text = UpdateContext.getParsedUpdate().getAnyTextFromMessage();
    if (text.startsWith(BotCommands.Admin.SET_LOG_CHANNEL_COMMAND)) {
//      text = text.substring(BotCommands.Admin.SET_LOG_CHANNEL_COMMAND.length());

//        long newLogChannelId = Long.parseLong(text.strip());

      long chatId = msg.getChatId();
      int messageId = msg.getMessageId();

      GetChatMember getChatMember = GetChatMember
          .builder()
          .chatId(chatId)
          .userId(BotConfig.SpamGuardBot_ID)
          .build();
      ChatMember member = telegramClient.execute(getChatMember);
      String answer;
      if (member instanceof ChatMemberAdministrator admin) {
        answer = String.format("""
                ‚úÖ *–ë–æ—Ç ‚Äî –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†. –ü—Ä–∞–≤–∞:*
                üîß *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ:* %s
                üóë *–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:* %s
                üóÑ *–£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–π:* %s
                ‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö:* %s
                üìù *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–π:* %s
                üë• *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* %s
                ‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º:* %s
                üìπ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ —á–∞—Ç–∞–º–∏:* %s
                üìå *–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:* %s
                üì¢ *–ü–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª–µ:* %s
                üìñ *–ü–æ—Å—Ç–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–π:* %s
                üöÄ *–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* %s
                üîí *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* %s
                üîë *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:* %s
                üóÇ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏:* %s""",
            admin.getCanChangeInfo(),
            admin.getCanDeleteMessages(),
            admin.getCanDeleteStories(),
            admin.getCanEditMessages(),
            admin.getCanEditStories(),
            admin.getCanInviteUsers(),
            admin.getCanManageChat(),
            admin.getCanManageVideoChats(),
            admin.getCanPinMessages(),
            admin.getCanPostMessages(),
            admin.getCanPostStories(),
            admin.getCanPromoteMembers(),
            admin.getCanRestrictMembers(),
            admin.getCanBeEdited(),
            admin.getCanManageTopics());
      } else {
        answer = "–ü–æ–≤—ã—Å—Ç–µ –º–æ—é —É—Ä–æ–≤–µ–Ω—å —É—Ä–æ–ª–∏ –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –¢–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞ —á—Ç–æ–±—ã —É –º–µ–Ω—è –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∞–º.";
      }

//        telegramClient.execute(ForwardMessage
//            .builder()
//            .chatId(newLogChannelId)
//            .fromChatId(fromChatId)
//            .messageId(messageId)
//            .disableNotification(true)
//            .protectContent(true)
//            .build());

      try {
        BotConfigService botConfigService = new BotConfigService();
        botConfigService.setLogChannelId(chatId);

        System.out.println("chatId: " + chatId);

        telegramClient.execute(DeleteMessage
            .builder()
            .chatId(chatId)
            .messageId(messageId)
            .build());

        telegramClient.execute(SendMessage
            .builder()
            .chatId(chatId)
            .text("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ª–æ–≥–æ–≤")
            .build());
      } catch (Exception e) {
        e.printStackTrace();
        answer = "–ò–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç—Å—É—Å—Ç–≤–∏—è –∞–π–¥–∏ —á–∞—Ç–∞ –ª–æ–≥–æ–≤ ‚Äì –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤.";
        telegramClient.execute(SendMessage
            .builder()
            .chatId(chatId)
            .text(answer)
            .parseMode("Markdown")
            .build());
      }
    }
  }
}
