package com.fransua.spamguardbot.handler.processor;

import com.fransua.spamguardbot.config.BotCommands;
import com.fransua.spamguardbot.config.BotConfig;
import com.fransua.spamguardbot.handler.core.Processor;
import com.fransua.spamguardbot.service.BotConfigService;
import com.fransua.spamguardbot.util.UpdateContext;
import com.fransua.spamguardbot.util.UpdateUtils;
import java.util.Optional;
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMember;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMemberAdministrator;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.generics.TelegramClient;

// TODO: refactor
public class SetChatCommandProcessor implements Processor {

  private final TelegramClient telegramClient;
  private final BotConfigService botConfigService;

  public SetChatCommandProcessor(TelegramClient telegramClient,
      BotConfigService botConfigService) {
    this.telegramClient = telegramClient;
    this.botConfigService = botConfigService;
  }

  @Override
  public void process(Update update) {
    Optional<Message> optionalMessage = UpdateUtils.extractMessage(update);
    if (optionalMessage.isEmpty()) {
      return;
    }
    Message msg = optionalMessage.get();
    Optional<String> optionalText = UpdateUtils.extractAnyTextFromMessage(msg);
    if (optionalText.isEmpty()) {
      return;
    }
    String text = optionalText.get();
    if (text.startsWith(BotCommands.Admin.SET_CHAT_COMMAND)) {
      long chatId = msg.getChatId();
      int messageId = msg.getMessageId();

      GetChatMember getChatMember = GetChatMember
          .builder()
          .chatId(chatId)
          .userId(BotConfig.SpamGuardBot_ID)
          .build();
      ChatMember member = null;
      try {
        member = telegramClient.execute(getChatMember);
      } catch (Exception e) {
        e.printStackTrace();
      }
      String answer;
      if (member instanceof ChatMemberAdministrator admin) {
        answer = String.format("""
                ‚úÖ *–ë–æ—Ç ‚Äî –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†. –ü—Ä–∞–≤–∞:*
                üîß *–ó–º—ñ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —á–∞—Ç:* %s
                üóë *–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:* %s
                üóÑ *–í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ–π:* %s
                ‚úèÔ∏è *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ–Ω—à–∏—Ö:* %s
                üìù *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ–π:* %s
                üë• *–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:* %s
                ‚öôÔ∏è *–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —á–∞—Ç–æ–º:* %s
                üìπ *–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—ñ–¥–µ–æ—á–∞—Ç–∞–º–∏:* %s
                üìå *–ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:* %s
                üì¢ *–ü–æ—Å—Ç–∏–Ω–≥ —É –∫–∞–Ω–∞–ª—ñ:* %s
                üìñ *–ü–æ—Å—Ç–∏–Ω–≥ —ñ—Å—Ç–æ—Ä—ñ–π:* %s
                üöÄ *–ü—Ä–æ—Å—É–≤–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤:* %s
                üîí *–û–±–º–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:* %s
                üîë *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:* %s
                üóÇ *–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–µ–º–∞–º–∏:* %s""",
            admin.getCanChangeInfo(),
            admin.getCanDeleteMessages(),
            admin.getCanDeleteStories(),
            admin.getCanEditMessages(),
            admin.getCanEditStories(),
            admin.getCanInviteUsers(),
            admin.getCanManageChat(),
            admin.getCanManageVideoChats(),
            admin.getCanPinMessages(),
            admin.getCanPostMessages(),
            admin.getCanPostStories(),
            admin.getCanPromoteMembers(),
            admin.getCanRestrictMembers(),
            admin.getCanBeEdited(),
            admin.getCanManageTopics());
      } else {
        answer = "–ü—ñ–¥–≤–∏—â—Ç–µ –º—ñ–π —Ä—ñ–≤–µ–Ω—å —Ä–æ–ª—ñ –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –¢–∞–∫—ñ –≤–∏–º–æ–≥–∏ Telegram, —â–æ–± —É –º–µ–Ω–µ –±—É–ª–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–¥–∞–ª—è—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Å–ø–∞–º —ñ –æ–±–º–µ–∂—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.";
      }

      try {
        botConfigService.setChatId(chatId);

        telegramClient.execute(DeleteMessage
            .builder()
            .chatId(chatId)
            .messageId(messageId)
            .build());

        telegramClient.execute(SendMessage
            .builder()
            .chatId(chatId)
            .text("–¢–µ–ø–µ—Ä —Ü–µ–π —á–∞—Ç –±—É–¥–µ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–∞–º.")
            .build());
      } catch (Exception e) {
        e.printStackTrace();
        answer = "–ß–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ ID —á–∞—Ç—É, –≤ —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ —Å–ø–∞–º ‚Äì –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–µ–ø–æ—Ä—Ç. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —á–∞—Ç, –≤ —è–∫–æ–º—É –±—É–¥–µ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Å–ø–∞–º—É.";
        try {
          telegramClient.execute(SendMessage
              .builder()
              .chatId(chatId)
              .text(answer)
              .parseMode("Markdown")
              .build());
        } catch (Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
}
